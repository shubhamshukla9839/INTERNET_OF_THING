
CONNECT NODE MCU TO THE " THING SPEAK " AND VISULIZE SENSORS ( HUMIDITY , TEMPERATURE ) [ DHT11 ]  DATA ON GRAPH :=>>>>>

{  USING HTTP PROTOCOL } 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import network
from machine import Pin
import dht
import socket
import time
from time import sleep
import ussl

API_KEY = "ETJ1HFG799R3YMJW"
HOST = "api.thingspeak.com"
MESUREMENT_INTERVAL = 5


def connect_to_ap():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print('connecting to network')
        wlan.scan()
        wlan.connect('Shubham', '8787220035')
        while not wlan.isconnected():
            pass
    print('network config', wlan.ifconfig())


def Send_Data(tTemp, tHumid):
    data = "api_key=" + API_KEY + "&field1=" + str(tTemp) + "&field2=" + str(tHumid)
    s = socket.socket()
    ai = socket.getaddrinfo(HOST, 443)
    addr = ai[0][-1]
    s.connect(addr)
    s = ussl.wrap_socket(s)

    s.write("POST /update HTTP/1.0\r\n")
    s.write("HOST: " + HOST + "\r\n")
    s.write("Content-Length: " + str(len(data)) + "\r\n\r\n")
    s.write(data)
    print(s.read(10))
    s.close()


def main():
    connect_to_ap()
    sensor = dht.DHT11(Pin(14))   #D5
    last_mesurement_time = 0
    while True:
        try:
            sleep(2)
            current_time = time.time()
            sensor.measure()
            temp = sensor.temperature()
            hum = sensor.humidity()
            temp_f = temp * (9 / 5) + 32.0
            print('Temperature: %3.1f C' % temp)
            print('Temperature: %3.1f F' % temp_f)
            print('Humidity: %3.1f %%' % hum)
        except OSError as e:
            print('Failed to read sensor.')

        if current_time - last_mesurement_time > MESUREMENT_INTERVAL:
            print('temperature', temp, 'humidity', hum)
            Send_Data(temp, hum)
            last_mesurement_time = current_time


if __name__ == '__main__':
    main()
